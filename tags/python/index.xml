<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Searching for the Shmoo</title>
    <link>https://ahal.ca/tags/python/</link>
    <description>Recent content in Python on Searching for the Shmoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Andrew Halberstadt</copyright>
    <lastBuildDate>Sat, 24 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ahal.ca/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>When would you use a Python mixin?</title>
      <link>https://ahal.ca/blog/2014/when-would-you-use-python-mixin/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/when-would-you-use-python-mixin/</guid>
      <description>&lt;p&gt;That&amp;rsquo;s not a rhetorical question. I&amp;rsquo;d like to know in which scenarios a mixin in python really is
the best option. I can&amp;rsquo;t seem to think of any, but maybe I&amp;rsquo;m not thinking outside the box enough.&lt;/p&gt;

&lt;p&gt;The basic idea of a mixin is to create a small re-usable class that can &amp;ldquo;plug-in&amp;rdquo; to other larger
classes. From the &lt;a href=&#34;http://en.wikipedia.org/wiki/Mixin&#34;&gt;wikipedia definition&lt;/a&gt;, a mixin is a way to compose classes together &lt;em&gt;without&lt;/em&gt;
using inheritance. The problem is unlike ruby, python mixins are a purely conceptual construct.
Python mixins &lt;em&gt;are&lt;/em&gt; inheritance (the only difference is that the class name usually contains
&amp;lsquo;Mixin&amp;rsquo;). It is up to the developer to remember this, and to manually avoid all of the common
pitfalls of multiple inheritance. This kind of defeats the whole purpose of the mixin in the first
place. What&amp;rsquo;s more is that most people use python mixins improperly.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Logging - Format a message without printing it</title>
      <link>https://ahal.ca/blog/2013/python-logging-format-message/</link>
      <pubDate>Thu, 25 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/python-logging-format-message/</guid>
      <description>&lt;p&gt;I came across an odd python problem the other day. I wanted to format a log message without printing
it with python&amp;rsquo;s logging module. But I couldn&amp;rsquo;t find any examples or others who wanted to do the
same thing.&lt;/p&gt;

&lt;p&gt;You might ask why I would want to do this. In my case, I was using sys.stdout.write() to display the
progress of a download as a percentage. Python&amp;rsquo;s logging module automatically appends a newline to
your message and there didn&amp;rsquo;t seem to be a way to change this without a subclass. Anytime you want
to overwrite something on the previous line with python logging, you will run into trouble.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>