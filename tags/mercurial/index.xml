<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mercurial on Hunting the Shmoo</title>
    <link>https://ahal.ca/tags/mercurial/</link>
    <description>Recent content in mercurial on Hunting the Shmoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2018 Andrew Halberstadt</copyright>
    <lastBuildDate>Tue, 28 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://ahal.ca/tags/mercurial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Absorbing Changes into a Commit Series with Mercurial</title>
      <link>https://ahal.ca/blog/2017/mercurial-absorb/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2017/mercurial-absorb/</guid>
      <description>&lt;p&gt;Imagine this scenario. You&amp;rsquo;ve pushed a large series of commits to your favourite review tool
(because you are a believer in the glory of microcommits). The reviewer however has found several
problems, and worse, they are spread across all of the commits in your series. How do you fix all
the issues with minimal fuss while preserving the commit order?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making mercurial bookmarks more git-like</title>
      <link>https://ahal.ca/blog/2015/making-mercurial-bookmarks-more-git-like/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2015/making-mercurial-bookmarks-more-git-like/</guid>
      <description>&lt;p&gt;I mentioned in my previous post a mercurial extension I wrote for making bookmarks easier to
manipulate. Since then it has undergone a large overhaul, and I believe it is now stable and
intuitive enough to advertise a bit more widely.&lt;/p&gt;
&lt;h2 id=&#34;introducing-bookbinder&#34;&gt;Introducing bookbinder&lt;/h2&gt;
&lt;p&gt;When working with bookmarks (or anonymous heads) I often wanted to operate on the
entire series of commits within the feature I was working on. I often found myself digging out
revision numbers to find the first commit in a bookmark to do things like rebasing, grafting or
diffing. This was annoying. I wanted bookmarks to work more like a git-style branch, that has a
definite start as well as an end. And I wanted to be able to easily refer to the set of commits
contained within. Enter &lt;a href=&#34;https://hg.sr.ht/~ahal/bookbinder&#34;&gt;bookbinder&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The New Mercurial Workflow - Part 2</title>
      <link>https://ahal.ca/blog/2015/new-mercurial-workflow-part-2/</link>
      <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2015/new-mercurial-workflow-part-2/</guid>
      <description>&lt;p&gt;This is a continuation of my previous post called &lt;a href=&#34;http://ahal.ca/blog/2014/new-mercurial-workflow/&#34;&gt;The New Mercurial Workflow&lt;/a&gt;. It assumes that
you have at least read and experimented with it a bit. If you haven&amp;rsquo;t, stop right now, read it, get
set up and try playing around with bookmarks and mozreview a bit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The New Mercurial Workflow</title>
      <link>https://ahal.ca/blog/2014/new-mercurial-workflow/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/new-mercurial-workflow/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a good chance you&amp;rsquo;ve heard something about a new review tool coming to Mozilla and how it will &lt;em&gt;change
everything&lt;/em&gt;. There&amp;rsquo;s an even better chance you&amp;rsquo;ve stumbled across one of gps&amp;rsquo; &lt;a href=&#34;http://gregoryszorc.com/blog/category/mercurial/&#34;&gt;blog posts&lt;/a&gt; on how
we use mercurial at Mozilla.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://groups.google.com/forum/#!topic/mozilla.dev.platform/RMkSXq2ckFk&#34;&gt;mozreview entering beta&lt;/a&gt;, I decided to throw out my old mq based workflow and
try to use all the latest and greatest tools. That means &lt;a href=&#34;http://mercurial.selenic.com/wiki/Bookmarks&#34;&gt;mercurial bookmarks&lt;/a&gt;, a &lt;a href=&#34;http://gregoryszorc.com/blog/2014/06/30/track-firefox-repositories-with-local-only-mercurial-tags/&#34;&gt;unified
mozilla-central&lt;/a&gt;, using &lt;a href=&#34;http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview.html&#34;&gt;mozreview&lt;/a&gt; and completely &lt;a href=&#34;http://gregoryszorc.com/blog/2014/06/23/please-stop-using-mq/&#34;&gt;expunging mq&lt;/a&gt; from my workflow.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Mercurial extension to version multiple patch queues</title>
      <link>https://ahal.ca/blog/2013/mercurial-extension-qqver/</link>
      <pubDate>Thu, 13 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/mercurial-extension-qqver/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hg.mozilla.org/users/ahalberstadt_mozilla.com/qqver/&#34;&gt;qqver&lt;/a&gt; is a Mercurial extension that forces mq to version all patch queues in the same
repository. The syntax is the exact same as when doing normal patch queue versioning (i.e &amp;lsquo;hg init
&amp;ndash;mq&amp;rsquo;), except the repo is created one directory higher so it is able to track all patch queues. As
with stock queue repos, new and existing patches are added automatically.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
