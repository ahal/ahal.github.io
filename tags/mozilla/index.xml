<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mozilla on Hunting the Shmoo</title>
    <link>https://ahal.ca/tags/mozilla/</link>
    <description>Recent content in mozilla on Hunting the Shmoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2018 Andrew Halberstadt</copyright>
    <lastBuildDate>Fri, 08 Oct 2021 16:57:22 -0400</lastBuildDate><atom:link href="https://ahal.ca/tags/mozilla/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Taskgraph Diff</title>
      <link>https://ahal.ca/casts/2021/taskgraph-diff/</link>
      <pubDate>Fri, 08 Oct 2021 16:57:22 -0400</pubDate>
      
      <guid>https://ahal.ca/casts/2021/taskgraph-diff/</guid>
      <description>&lt;p&gt;Introducing &lt;code&gt;taskgraph --diff&lt;/code&gt; to help validate your task configuration changes.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/626856476&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Phabricator Etiquette Part 2: The Author</title>
      <link>https://ahal.ca/blog/2021/phabricator-etiquette-part-2-the-author/</link>
      <pubDate>Tue, 27 Apr 2021 09:33:31 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2021/phabricator-etiquette-part-2-the-author/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ahal.ca/blog/2021/phabricator-etiquette-part-1-the-reviewer/&#34;&gt;Last time&lt;/a&gt; we looked at some
ways reviewers can keep the review process moving efficiently. This week, let&amp;rsquo;s put on our author
hats and do the same thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phabricator Etiquette Part 1: The Reviewer</title>
      <link>https://ahal.ca/blog/2021/phabricator-etiquette-part-1-the-reviewer/</link>
      <pubDate>Tue, 13 Apr 2021 15:42:41 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2021/phabricator-etiquette-part-1-the-reviewer/</guid>
      <description>&lt;p&gt;In the next two posts we will examine the etiquette of using Phabricator. This post will examine
tips from the reviewer&amp;rsquo;s perspective, and next week will focus on the author&amp;rsquo;s point of view.
While the social aspects of etiquette are incredibly important, we should all be polite and
considerate, these posts will focus more on the mechanics of using Phabricator. In other words, how
to make the review process as smooth as possible without wasting anyone&amp;rsquo;s time.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dig in!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Better Replacement for ls</title>
      <link>https://ahal.ca/blog/2021/ls-replacement/</link>
      <pubDate>Tue, 06 Apr 2021 11:05:21 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2021/ls-replacement/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If it ain&amp;rsquo;t broke don&amp;rsquo;t fix it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This old addage is valuable advice that has been passed down through
generations. But it hasn&amp;rsquo;t stopped these people from &lt;a href=&#34;https://zaiste.net/posts/shell-commands-rust/&#34;&gt;rewriting command line
tools&lt;/a&gt; perfected 30+ years ago in Rust.&lt;/p&gt;
&lt;p&gt;This week we&amp;rsquo;ll take a quick look at &lt;a href=&#34;https://the.exa.website/&#34;&gt;exa&lt;/a&gt;, a replacement for &lt;code&gt;ls&lt;/code&gt;. So why
should you ignore the wise advice from the addage and replace &lt;code&gt;ls&lt;/code&gt;? Because there are marginal
improvements to be had, duh! Although the improvements in this case are far from marginal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advanced Mach Try</title>
      <link>https://ahal.ca/blog/2021/advanced-mach-try/</link>
      <pubDate>Tue, 30 Mar 2021 09:30:00 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2021/advanced-mach-try/</guid>
      <description>&lt;p&gt;Following up &lt;a href=&#34;https://ahal.ca/blog/2021/understanding-mach-try/&#34;&gt;last week&amp;rsquo;s post&lt;/a&gt; on some &lt;code&gt;mach try&lt;/code&gt; fundamentals, I figured it would be worth posting some actual concrete tips and tricks. So
without further ado, here are some things you can do with &lt;code&gt;./mach try&lt;/code&gt; you may not have known about
in rapid fire format.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Mach Try</title>
      <link>https://ahal.ca/blog/2021/understanding-mach-try/</link>
      <pubDate>Tue, 23 Mar 2021 10:51:01 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2021/understanding-mach-try/</guid>
      <description>&lt;p&gt;There is a lot of confusion around &lt;code&gt;mach try&lt;/code&gt;. People frequently ask &amp;ldquo;How do I get task X in mach
try fuzzy?&amp;rdquo; or &amp;ldquo;How can I avoid getting backed out?&amp;rdquo;. This post is not so much a tip, rather an
explanation around how &lt;code&gt;mach try&lt;/code&gt; works and its relationship to the CI system (taskgraph). Armed
with this knowledge, I hope you&amp;rsquo;ll be able to use &lt;code&gt;mach try&lt;/code&gt; a little more effectively.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Managing Multiple Mozconfigs</title>
      <link>https://ahal.ca/blog/2021/managing-multiple-mozconfigs/</link>
      <pubDate>Tue, 16 Mar 2021 09:48:48 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2021/managing-multiple-mozconfigs/</guid>
      <description>&lt;p&gt;Mozilla developers often need to juggle multiple build configurations in their day to day work.
Strategies to manage this sometimes include complex shell scripting built into their mozconfig, or a
topsrcdir littered with &lt;code&gt;mozconfig-*&lt;/code&gt; files and then calls to the build system like
&lt;code&gt;MOZCONFIG=mozconfig-debug ./mach build&lt;/code&gt;. But there&amp;rsquo;s another method (which is basically just a
variant on the latter), that might help make managing mozconfigs a teensy bit easier:
&lt;a href=&#34;https://github.com/ahal/mozconfigwrapper&#34;&gt;mozconfigwrapper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the interest of not documenting things in blog posts (and because I&amp;rsquo;m short on time this
morning), I invite you to read the README file of the repo for installation and usage instructions.
Please file issues and don&amp;rsquo;t hesitate to reach out if the README is not clear or you have any
problems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hide Your Lint Errors</title>
      <link>https://ahal.ca/blog/2021/hide-your-lint-errors/</link>
      <pubDate>Tue, 09 Mar 2021 09:15:07 -0500</pubDate>
      
      <guid>https://ahal.ca/blog/2021/hide-your-lint-errors/</guid>
      <description>&lt;p&gt;Have you ever submitted a patch to Phabricator only to have reviewbot reveal dozens of lint errors
all over? Or worse yet, have you landed before reviewbot had a chance to analyze your patch and been
backed out over lint failures? If so fear not, we&amp;rsquo;ve all been there. Still, it&amp;rsquo;s hard not to feel a
little embarrassed when it happens. Luckily for you, it&amp;rsquo;s pretty easy to eliminate the possibility
of it ever happening again!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DevOps at Mozilla</title>
      <link>https://ahal.ca/blog/2021/mozilla-devops/</link>
      <pubDate>Tue, 02 Mar 2021 11:00:00 -0500</pubDate>
      
      <guid>https://ahal.ca/blog/2021/mozilla-devops/</guid>
      <description>&lt;p&gt;I first joined &lt;a href=&#34;https://ahal.ca/blog/2011/why-mozilla-is-awesome/&#34;&gt;Mozilla as an intern&lt;/a&gt; in 2010 for
the &amp;ldquo;Tools and Automation Team&amp;rdquo; (colloquially called the &amp;ldquo;A-Team&amp;rdquo;). I always had a bit of
difficulty describing our role. We work on tests. But not the tests themselves, the the thing that
runs the tests. Also we make sure the tests run when code lands. Also we have this dashboard to view
results, oh and also we do a bunch of miscellaneous developer productivity kind of things. Oh and
sometimes we have to do other operational type things as well, but it varies.&lt;/p&gt;
&lt;p&gt;Over the years the team grew to a peak of around 25 people and the A-Team&amp;rsquo;s responsibilities
expanded to include things like the build system, version control, review tools and
more. Combined with Release Engineering (RelEng), this covered almost all of
the software development pipeline. The A-Team was eventually split up into many smaller
teams. Over time those smaller teams were re-org&amp;rsquo;ed, split up further, merged and renamed over and
over again. Many labels were applied to the departments that tended to contain those teams. Labels
like &amp;ldquo;Developer Productivity&amp;rdquo;, &amp;ldquo;Platform Operations&amp;rdquo;, &amp;ldquo;Product Integrity&amp;rdquo; and &amp;ldquo;Engineering
Effectiveness&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Interestingly, from 2010 to present, one label that has never been applied to any of these teams is
&amp;ldquo;DevOps&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Better Terminal for Mozilla Build</title>
      <link>https://ahal.ca/blog/2021/mozilla-build-windows-terminal/</link>
      <pubDate>Tue, 02 Mar 2021 09:00:00 -0500</pubDate>
      
      <guid>https://ahal.ca/blog/2021/mozilla-build-windows-terminal/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re working with mozilla-central on Windows and followed the &lt;a href=&#34;https://firefox-source-docs.mozilla.org/setup/windows_build.html&#34;&gt;official
documentation&lt;/a&gt;, there&amp;rsquo;s a good
chance the MozillaBuild shell is running in the default &lt;code&gt;cmd.exe&lt;/code&gt; console. If you&amp;rsquo;ve spent any
amount of time in this console you&amp;rsquo;ve also likely noticed it leaves a bit to be desired. Standard
terminal features such as tabs, splits and themes are missing. More importantly, it doesn&amp;rsquo;t render
unicode characters (at least out of the box).&lt;/p&gt;
&lt;p&gt;Luckily Microsoft has developed a &lt;a href=&#34;https://www.microsoft.com/en-ca/p/windows-terminal/9n0dx20hk701&#34;&gt;modern
terminal&lt;/a&gt; that can replace cmd.exe,
and getting it set up with MozillaBuild shell is simple.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing Firefox More Efficiently With Machine Learning</title>
      <link>https://ahal.ca/blog/2020/testing-firefox-more-efficiently-with-machine-learning/</link>
      <pubDate>Fri, 10 Jul 2020 12:08:34 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2020/testing-firefox-more-efficiently-with-machine-learning/</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was co-authored with &lt;a href=&#34;https://marco-c.github.io/&#34;&gt;Marco Castelluccio&lt;/a&gt;, and was originally
posted to the &lt;a href=&#34;https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/&#34;&gt;Mozilla Hacks
Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A browser is an incredibly complex piece of software. With such enormous complexity, the only way to maintain a rapid pace of development is through an extensive &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI&lt;/a&gt; system that can give developers confidence that their changes won&amp;rsquo;t introduce bugs. Given the scale of our CI, weâre always looking for ways to reduce load while maintaining a high standard of product quality. We wondered if we could use machine learning to reach a higher degree of efficiency.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Cost of Fragmented Communication</title>
      <link>https://ahal.ca/blog/2019/fragmented-communication/</link>
      <pubDate>Tue, 21 May 2019 15:04:33 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2019/fragmented-communication/</guid>
      <description>&lt;p&gt;Mozilla &lt;a href=&#34;http://exple.tive.org/blarg/2019/04/26/synchronous-text/&#34;&gt;recently announced&lt;/a&gt; that we are planning to de-commission &lt;code&gt;irc.mozilla.org&lt;/code&gt; in favour
of a yet to be determined solution. As a long time user and supporter of IRC, this decision causes
me some melancholy, but I 100% believe that it is the right call. Moreover, having had an inside
glimpse at the process to replace it, I&amp;rsquo;m supremely confident whatever is chosen will be the best
option for Mozilla&amp;rsquo;s needs.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not here to explain why deprecating IRC is a good idea. &lt;a href=&#34;http://exple.tive.org/blarg/2018/11/09/the-evolution-of-open/&#34;&gt;Other&lt;/a&gt; &lt;a href=&#34;https://blog.humphd.org/irc-mozilla-org/&#34;&gt;people&lt;/a&gt; have
already done so much more eloquently than I ever could have. I&amp;rsquo;m also not here to push for a
specific replacement. Arguing over chat applications is like arguing over editors or version
control. Yes, there are real and important differences from one application to the next, but if
there&amp;rsquo;s one thing we&amp;rsquo;re spoiled for in 2019 it&amp;rsquo;s chat applications. Besides, so much time has been
spent thinking about the &lt;a href=&#34;http://exple.tive.org/blarg/2019/05/03/goals-and-constraints/&#34;&gt;requirements&lt;/a&gt;, there&amp;rsquo;s little anyone could say on the matter that
hasn&amp;rsquo;t already been considered for hours.&lt;/p&gt;
&lt;p&gt;This post is about an unrelated, but adjacent issue. An issue that began when &lt;code&gt;mozilla.slack.com&lt;/code&gt;
first came online, an issue that will likely persist long after &lt;code&gt;irc.mozilla.org&lt;/code&gt; rides off into
the sunset. An issue I don&amp;rsquo;t think is brought up enough, and which I&amp;rsquo;m hoping to start some
discussion on now that communication is on everyone&amp;rsquo;s mind. I&amp;rsquo;m talking about using two
communication platforms at once. For now Slack and IRC, soon to be Slack and something else.&lt;/p&gt;
&lt;p&gt;Different platform, same problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 3 at Mozilla</title>
      <link>https://ahal.ca/blog/2019/python-3-at-mozilla/</link>
      <pubDate>Tue, 30 Apr 2019 15:25:50 -0400</pubDate>
      
      <guid>https://ahal.ca/blog/2019/python-3-at-mozilla/</guid>
      <description>&lt;p&gt;Mozilla uses a lot of Python. Most of our build system, CI configuration, test harnesses, command
line tooling and countless other scripts, tools or Github projects are all handled by Python. In
mozilla-central there are over 3500 Python files (excluding third party files), comprising roughly
230k lines of code. Additionally there are &lt;a href=&#34;https://github.com/mozilla?utf8=%E2%9C%93&amp;amp;q=&amp;amp;type=&amp;amp;language=python&#34;&gt;462 repositories&lt;/a&gt; labelled with Python in the Mozilla
org on Github (though many of these are not active). That&amp;rsquo;s a lot of Python, and most of it is
Python 2.&lt;/p&gt;
&lt;p&gt;With Python 2&amp;rsquo;s exaugural year well underway, it is a good time to take stock of the situation and
ask some questions. How far along has Mozilla come in the Python 3 migration? Which large work items
lie on the critical path? And do we have a plan to get to a good state in time for Python 2&amp;rsquo;s EOL on
January 1st, 2020?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Task Configuration at Scale</title>
      <link>https://ahal.ca/casts/2019/task-configuration-at-scale/</link>
      <pubDate>Tue, 12 Mar 2019 17:10:32 -0400</pubDate>
      
      <guid>https://ahal.ca/casts/2019/task-configuration-at-scale/</guid>
      <description>&lt;p&gt;A talk I did for the Automationeer&amp;rsquo;s Assemble series on how Mozilla handles complexity in their CI
configuration.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/322897542&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Taskgraph Like a Pro</title>
      <link>https://ahal.ca/casts/2018/taskgraph-like-a-pro/</link>
      <pubDate>Fri, 14 Dec 2018 12:21:21 -0500</pubDate>
      
      <guid>https://ahal.ca/casts/2018/taskgraph-like-a-pro/</guid>
      <description>&lt;p&gt;Have you ever needed to inspect the taskgraph locally? Did you have a bad time? Learn how to inspect
the taskgraph like a PRO. For the impatient skip to the installation instructions below.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/306431059&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Try Fuzzy: A Try Syntax Alternative</title>
      <link>https://ahal.ca/blog/2017/mach-try-fuzzy/</link>
      <pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2017/mach-try-fuzzy/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that I&amp;rsquo;m not a fan of try syntax, it&amp;rsquo;s a topic I&amp;rsquo;ve blogged about on &lt;a href=&#34;https://ahal.ca/blog/2015/try-syntax/&#34;&gt;several&lt;/a&gt;
&lt;a href=&#34;https://ahal.ca/blog/2017/fuzzy-try-chooser/&#34;&gt;occasions&lt;/a&gt; before. Today, I&amp;rsquo;m pleased to announce that there&amp;rsquo;s a real alternative now landed on
mozilla-central. It works on all platforms with mercurial and git. For those who just like to dive in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mach mercurial-setup --update  &lt;span style=&#34;color:#75715e&#34;&gt;# only if using hg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mach try fuzzy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will prompt you to install &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;. After bootstrapping is finished, you&amp;rsquo;ll enter an interface
populated with a list of all possible taskcluster tasks. Start typing and the list will be filtered
down using a fuzzy matching algorithm. I won&amp;rsquo;t go into details on how to use this tool in this blog
post, for that see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mach try fuzzy --help  &lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ man fzf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Absorbing Changes into a Commit Series with Mercurial</title>
      <link>https://ahal.ca/blog/2017/mercurial-absorb/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2017/mercurial-absorb/</guid>
      <description>&lt;p&gt;Imagine this scenario. You&amp;rsquo;ve pushed a large series of commits to your favourite review tool
(because you are a believer in the glory of microcommits). The reviewer however has found several
problems, and worse, they are spread across all of the commits in your series. How do you fix all
the issues with minimal fuss while preserving the commit order?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Course of Action for Replacing Try Syntax</title>
      <link>https://ahal.ca/blog/2017/fuzzy-try-chooser/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2017/fuzzy-try-chooser/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve previously &lt;a href=&#34;https://ahal.ca/blog/2015/try-syntax/&#34;&gt;blogged&lt;/a&gt; about why I believe try syntax is an antiquated development process
that should be replaced with something more modern and flexible. What follows is a series of ideas
that I&amp;rsquo;m trying to convert into a concrete plan of action to bring this about. This is not an
&lt;em&gt;Intent to Implement&lt;/em&gt; or anything like that, but my hope is that this outline is detailed enough
that it could be used as a solid starting point by someone with enough time and motivation to
work on it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using One Click Loaner to Debug Failures</title>
      <link>https://ahal.ca/blog/2016/taskcluster-interactive-loaner/</link>
      <pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2016/taskcluster-interactive-loaner/</guid>
      <description>&lt;p&gt;One of the most painful aspects of a developer&amp;rsquo;s work cycle is trying to fix failures that show up
on try, but which can&amp;rsquo;t be reproduced locally. When this happens, there were really only two
options (neither of them nice):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You could spam try with print debugging. But this isn&amp;rsquo;t very powerful, and takes forever to get
feedback.&lt;/li&gt;
&lt;li&gt;You could request a loaner from releng. But this is a heavy handed process, and once you have the
loaner it is very hard to get tests up and running.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m pleased to announce there is now a third option, which is easy, powerful and 100% self-serve.
Rather than trying to explain it in words, here is a ~5 minute demo:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>The Zen of Mach</title>
      <link>https://ahal.ca/blog/2016/zen-of-mach/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2016/zen-of-mach/</guid>
      <description>&lt;p&gt;Mach is the Mozilla developer&amp;rsquo;s swiss army knife. It gathers all the important commands you&amp;rsquo;ll ever
need to run, and puts them in one convenient place. Instead of hunting down documentation, or asking
for help on irc, often a simple |mach help| is all that&amp;rsquo;s needed to get you started. Mach is great.
But lately, mach is becoming more like the Mozilla developer&amp;rsquo;s toolbox. It still has everything you
need but it weighs a ton, and it takes a good deal of rummaging around to find anything.&lt;/p&gt;
&lt;p&gt;Frankly, a good deal of the mach commands that exist now are either poorly written, confusing to use,
or even have no business being mach commands in the first place. Why is this important? What&amp;rsquo;s wrong
with having a toolbox?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Looking beyond Try Syntax</title>
      <link>https://ahal.ca/blog/2015/try-syntax/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2015/try-syntax/</guid>
      <description>&lt;p&gt;Today marks the 5 year anniversary of try syntax. For the uninitiated, try syntax is a string that
you put into your commit message which a &lt;a href=&#34;http://hg.mozilla.org/build/buildbotcustom/file/tip/try_parser.py&#34;&gt;parser&lt;/a&gt; then uses to determine the set of builds and
tests to run on your try push. A common try syntax might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;try: -b o -p linux -u mochitest -t none
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since inception, it has been a core part of the Mozilla development workflow.
For many years it has served us well, and even today it serves us passably. But it is almost time
for try syntax to don the wooden overcoat, and this post will explain why.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making mercurial bookmarks more git-like</title>
      <link>https://ahal.ca/blog/2015/making-mercurial-bookmarks-more-git-like/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2015/making-mercurial-bookmarks-more-git-like/</guid>
      <description>&lt;p&gt;I mentioned in my previous post a mercurial extension I wrote for making bookmarks easier to
manipulate. Since then it has undergone a large overhaul, and I believe it is now stable and
intuitive enough to advertise a bit more widely.&lt;/p&gt;
&lt;h2 id=&#34;introducing-bookbinder&#34;&gt;Introducing bookbinder&lt;/h2&gt;
&lt;p&gt;When working with bookmarks (or anonymous heads) I often wanted to operate on the
entire series of commits within the feature I was working on. I often found myself digging out
revision numbers to find the first commit in a bookmark to do things like rebasing, grafting or
diffing. This was annoying. I wanted bookmarks to work more like a git-style branch, that has a
definite start as well as an end. And I wanted to be able to easily refer to the set of commits
contained within. Enter &lt;a href=&#34;https://hg.sr.ht/~ahal/bookbinder&#34;&gt;bookbinder&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The New Mercurial Workflow - Part 2</title>
      <link>https://ahal.ca/blog/2015/new-mercurial-workflow-part-2/</link>
      <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2015/new-mercurial-workflow-part-2/</guid>
      <description>&lt;p&gt;This is a continuation of my previous post called &lt;a href=&#34;http://ahal.ca/blog/2014/new-mercurial-workflow/&#34;&gt;The New Mercurial Workflow&lt;/a&gt;. It assumes that
you have at least read and experimented with it a bit. If you haven&amp;rsquo;t, stop right now, read it, get
set up and try playing around with bookmarks and mozreview a bit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Consume Structured Test Results</title>
      <link>https://ahal.ca/blog/2014/consume-structured-test-results/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/consume-structured-test-results/</guid>
      <description>&lt;p&gt;You may not know that most of our test harnesses are now outputting structured logs (thanks in large
part to :chmanchester&amp;rsquo;s tireless work). Saying a log is structured simply means that it is in a
machine readable format, in our case each log line is a JSON object. When streamed to a terminal or
treeherder log, these JSON objects are first formatted into something that is human readable, aka
the same log format you&amp;rsquo;re already familiar with (which is why you may not have noticed this).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The New Mercurial Workflow</title>
      <link>https://ahal.ca/blog/2014/new-mercurial-workflow/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/new-mercurial-workflow/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a good chance you&amp;rsquo;ve heard something about a new review tool coming to Mozilla and how it will &lt;em&gt;change
everything&lt;/em&gt;. There&amp;rsquo;s an even better chance you&amp;rsquo;ve stumbled across one of gps&amp;rsquo; &lt;a href=&#34;http://gregoryszorc.com/blog/category/mercurial/&#34;&gt;blog posts&lt;/a&gt; on how
we use mercurial at Mozilla.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://groups.google.com/forum/#!topic/mozilla.dev.platform/RMkSXq2ckFk&#34;&gt;mozreview entering beta&lt;/a&gt;, I decided to throw out my old mq based workflow and
try to use all the latest and greatest tools. That means &lt;a href=&#34;http://mercurial.selenic.com/wiki/Bookmarks&#34;&gt;mercurial bookmarks&lt;/a&gt;, a &lt;a href=&#34;http://gregoryszorc.com/blog/2014/06/30/track-firefox-repositories-with-local-only-mercurial-tags/&#34;&gt;unified
mozilla-central&lt;/a&gt;, using &lt;a href=&#34;http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview.html&#34;&gt;mozreview&lt;/a&gt; and completely &lt;a href=&#34;http://gregoryszorc.com/blog/2014/06/23/please-stop-using-mq/&#34;&gt;expunging mq&lt;/a&gt; from my workflow.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How many tests are disabled?</title>
      <link>https://ahal.ca/blog/2014/how-many-tests-are-disabled/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/how-many-tests-are-disabled/</guid>
      <description>&lt;p&gt;tl;dr Look for &lt;a href=&#34;http://people.mozilla.org/~ahalberstadt/informant-reports/daily/2014-09-29.informant-report.html&#34;&gt;reports like this&lt;/a&gt; in the near future!&lt;/p&gt;
&lt;p&gt;At Mozilla, platform developers are culturally bound to &lt;a href=&#34;http://tbpl.mozilla.org&#34;&gt;tbpl&lt;/a&gt;. We spend a lot of time staring at
those bright little letters, and their colour can mean the difference between hours, days or even
weeks of work. With so many people performing over &lt;a href=&#34;http://relengofthenerds.blogspot.ca/2014/09/mozilla-pushes-august-2014.html&#34;&gt;420 pushes per day&lt;/a&gt;, all watching,
praying, rejoicing and cursing, it&amp;rsquo;s paramount that the whole process operates like a well oiled
machine.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>When would you use a Python mixin?</title>
      <link>https://ahal.ca/blog/2014/when-would-you-use-python-mixin/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/when-would-you-use-python-mixin/</guid>
      <description>&lt;p&gt;That&amp;rsquo;s not a rhetorical question. I&amp;rsquo;d like to know in which scenarios a mixin in python really is
the best option. I can&amp;rsquo;t seem to think of any, but maybe I&amp;rsquo;m not thinking outside the box enough.&lt;/p&gt;
&lt;p&gt;The basic idea of a mixin is to create a small re-usable class that can &amp;ldquo;plug-in&amp;rdquo; to other larger
classes. From the &lt;a href=&#34;http://en.wikipedia.org/wiki/Mixin&#34;&gt;wikipedia definition&lt;/a&gt;, a mixin is a way to compose classes together &lt;em&gt;without&lt;/em&gt;
using inheritance. The problem is unlike ruby, python mixins are a purely conceptual construct.
Python mixins &lt;em&gt;are&lt;/em&gt; inheritance (the only difference is that the class name usually contains
&amp;lsquo;Mixin&amp;rsquo;). It is up to the developer to remember this, and to manually avoid all of the common
pitfalls of multiple inheritance. This kind of defeats the whole purpose of the mixin in the first
place. What&amp;rsquo;s more is that most people use python mixins improperly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Part 2: How to deal with IFFY requirements</title>
      <link>https://ahal.ca/blog/2014/part-2-how-deal-iffy-requirements/</link>
      <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/part-2-how-deal-iffy-requirements/</guid>
      <description>&lt;p&gt;My last post was basically a very long winded way of saying, &amp;ldquo;we have a problem&amp;rdquo;. It kind of did a
little dance around &amp;ldquo;why is there a problem&amp;rdquo; and &amp;ldquo;how do we fix it&amp;rdquo;, but I want to explore these two
questions in a bit more detail. Specifically, I want to return to the two case studies and explore
why our test harnesses don&amp;rsquo;t work and why mozharness does work even though both have IFFY (in flux
for years) requirements. Then I will explore how to use the lessons learned to improve our general
test harness design.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Part 1: Sharing code is not always a good thing</title>
      <link>https://ahal.ca/blog/2014/part-1-sharing-code-not-always-good-thing/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/part-1-sharing-code-not-always-good-thing/</guid>
      <description>&lt;h3 id=&#34;dry-versus-wet&#34;&gt;Dry versus Wet&lt;/h3&gt;
&lt;p&gt;As programmers, we are taught early on that code duplication is bad and should be avoided at all
cost. It makes code less maintainable, reusable and readable. The &lt;a href=&#34;http://en.wikipedia.org/wiki/DRY_principle&#34;&gt;DRY principle&lt;/a&gt; is very basic
and fundamental to how most of us approach software design. If you aren&amp;rsquo;t familiar with the DRY
principle, please take a minute to read the wikipedia page on it. The counterpart of DRY, is WET
(write everything twice).  In general, I agree that DRY is good and WET is bad. But I think there
are a class of problems where the DRY approach can actually be harmful. For these types of problems,
I will make a claim that a WET approach can actually work better.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Add more mach to your B2G</title>
      <link>https://ahal.ca/blog/2014/b2g-commands/</link>
      <pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/b2g-commands/</guid>
      <description>&lt;h4 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;tl;dr - It is possible to add more mach to your B2G repo! To get started, install pip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py -O - | python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install b2g-commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install b2g-commands
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To play around with it, cd to your &lt;a href=&#34;https://github.com/mozilla-b2g/B2G&#34;&gt;B2G repo&lt;/a&gt; and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git pull                 &lt;span style=&#34;color:#75715e&#34;&gt;# make sure repo is up to date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./mach help              &lt;span style=&#34;color:#75715e&#34;&gt;# see all available commands&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./mach help &amp;amp;lt;command&amp;amp;gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# see additional info about a command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;details&#34;&gt;Details&lt;/h4&gt;
&lt;p&gt;Most people who spend the majority of their time working within mozilla-central have probably been
acquainted with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Developer_Guide/mach&#34;&gt;mach&lt;/a&gt;. In case you aren&amp;rsquo;t acquainted, mach is a generic command dispatching
tool. It is possible to write scripts called &amp;lsquo;mach targets&amp;rsquo; which get registered with mach core and
transformed into commands. Mach targets in mozilla-central have access to all sorts of powerful
hooks into the build and test infrastructure which allow them to do some really cool things, such as
bootstrapping your environment, running builds and tests, and generating diagnostics.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Workflow for using Mach with multiple Object Directories</title>
      <link>https://ahal.ca/blog/2014/mach-workflow/</link>
      <pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2014/mach-workflow/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Developer_Guide/mach&#34;&gt;Mach&lt;/a&gt; is an amazing tool which facilitates a large number of common user stories in the mozilla
source tree. You can perform initial setup, execute a build, run tests, examine diagnostics, even
search Google. Many of these things require an object directory. This can potentially lead to some
confusion if you typically have more than one object directory at any given time. How does mach know
which object directory to operate on?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>We Are All Enablers</title>
      <link>https://ahal.ca/blog/2013/we-are-all-enablers/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/we-are-all-enablers/</guid>
      <description>&lt;p&gt;This probably isn&amp;rsquo;t a groundbreaking revelation to most Mozillians, but it&amp;rsquo;s something I haven&amp;rsquo;t
quite managed to put into words until now.&lt;/p&gt;
&lt;p&gt;On the Tools and Automation team at Mozilla, the easiest way to describe what we do is to say &amp;ldquo;We
try to make the lives of others within the community easier&amp;rdquo;. This is a vague statement, but it&amp;rsquo;s
about as close as we can get without writing a small dissertation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running B2G unittests with Mach</title>
      <link>https://ahal.ca/blog/2013/running-b2g-unittests-mach/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/running-b2g-unittests-mach/</guid>
      <description>&lt;p&gt;Before now running &amp;lsquo;classic&amp;rsquo; unittests (mochitest, reftest, xpcshell, etc.) on B2G emulators has
been a massive pain. The new recommended way of running them is through mach.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update B2G repo if you haven&amp;rsquo;t already: &lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure an emulator: &lt;code&gt;BRANCH=master ./config.sh emulator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build: &lt;code&gt;./build.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run: &lt;code&gt;./mach mochitest-remote&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>How to Push a Custom Test Command Line to Try</title>
      <link>https://ahal.ca/blog/2013/push-custom-test-command-line-try/</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/push-custom-test-command-line-try/</guid>
      <description>&lt;h3 id=&#34;outdated&#34;&gt;OUTDATED&lt;/h3&gt;
&lt;p&gt;The steps in this article are no longer accurate. Pushing a custom command line is easier now. See
&lt;a href=&#34;https://groups.google.com/forum/#!topic/mozilla.dev.platform/AKDyoQShFEs&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Have you ever wanted to see the test results of a custom command line in try? Things like
&amp;ndash;test-manifest, &amp;ndash;shuffle or &amp;ndash;run-slower?  Now you can! The process isn&amp;rsquo;t exactly optimized for
the developer use case, but neither is it really difficult to do once you know how.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Mercurial extension to version multiple patch queues</title>
      <link>https://ahal.ca/blog/2013/mercurial-extension-qqver/</link>
      <pubDate>Thu, 13 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/mercurial-extension-qqver/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hg.mozilla.org/users/ahalberstadt_mozilla.com/qqver/&#34;&gt;qqver&lt;/a&gt; is a Mercurial extension that forces mq to version all patch queues in the same
repository. The syntax is the exact same as when doing normal patch queue versioning (i.e &amp;lsquo;hg init
&amp;ndash;mq&amp;rsquo;), except the repo is created one directory higher so it is able to track all patch queues. As
with stock queue repos, new and existing patches are added automatically.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crash Stacks - Memoirs of a B2G Unittest</title>
      <link>https://ahal.ca/blog/2013/b2g-unittest-crashstacks/</link>
      <pubDate>Thu, 28 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/b2g-unittest-crashstacks/</guid>
      <description>&lt;p&gt;Hey! Check it out, I have crash stacks in my &lt;a href=&#34;https://tbpl.mozilla.org/php/getParsedLog.php?id=21215744&amp;amp;full=1&amp;amp;branch=mozilla-inbound&#34;&gt;logs&lt;/a&gt; now!  I know, I know, I took my sweet time.
I&amp;rsquo;m sorry. I hope this doesn&amp;rsquo;t damage our relationship. Is there anything I can do to make it up to
you? I want to help. I really do. It&amp;rsquo;s just. I don&amp;rsquo;t know. I guess I&amp;rsquo;ve been feeling under the
weather lately. I must have caught a &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=846091&#34;&gt;bug&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Open Invitation to Enable your Favourite tests on B2G</title>
      <link>https://ahal.ca/blog/2013/enable-b2g-tests/</link>
      <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2013/enable-b2g-tests/</guid>
      <description>&lt;p&gt;Throughout most of our B2G test automation deployment, we&amp;rsquo;ve been very conscious about not enabling
too many tests simply because we didn&amp;rsquo;t have enough capacity on our test slaves to run them all.
Regardless it was still bad enough as it was (many of you probably experienced very long wait times
for results). Thanks to releng (and especially Rail Aliiev) we are now running most of our B2G tests
in Amazon AWS which means we can be much more flexible in accomodating load.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Tired Developer&#39;s non-Illustrated Primer to B2G Testing</title>
      <link>https://ahal.ca/blog/2012/guide-to-b2g-testing/</link>
      <pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2012/guide-to-b2g-testing/</guid>
      <description>&lt;p&gt;As B2G continues to trod onwards to its release, there is still a lot of confusion about the level
and state of test coverage it has.  Back in November we started running mochitests, reftests and
marionette/webapi tests on ARM emulators. Now we&amp;rsquo;ve also added xpcshell tests and for the most part
we have these nice green letters to look at on TBPL that make us feel good about ourselves. But what
is really being run?  What is the meaning behind these letters &amp;ldquo;M&amp;rdquo;, &amp;ldquo;R&amp;rdquo;, &amp;ldquo;Mn&amp;rdquo; and &amp;ldquo;X&amp;rdquo;? Are there any
causes for concern? Are there other tests being run that don&amp;rsquo;t show up on TBPL? What are the current
automation priorities? What are the next platforms to use after emulators?&lt;/p&gt;
&lt;p&gt;This blog post aims to answer these questions and more. It is a comprehensive snapshot of the
current state of automated testing on B2G.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Like a Bump on a Tinderbox Push Log</title>
      <link>https://ahal.ca/blog/2012/b2g-emulator-tests/</link>
      <pubDate>Thu, 08 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2012/b2g-emulator-tests/</guid>
      <description>&lt;p&gt;Contrary to popular belief, we (the A-Team) have been running mochitests, reftests, marionette tests
and webapi tests on B2G in some form of continuous integration or another for about 5 months now.
They&amp;rsquo;ve been reporting results to a TBPL look-alike called &lt;a href=&#34;http://brasstacks.mozilla.com/autolog/?tree=b2g&amp;amp;source=autolog&#34;&gt;autolog&lt;/a&gt;, and were run on Amazon EC2
VM&amp;rsquo;s with emulators. This was a temporary solution to get something stood up quickly while we moved
towards our ultimate B2G automation goal - tests running on Pandaboards and reporting to TBPL.&lt;/p&gt;
&lt;p&gt;As of this week, while there are still no tests running on Pandaboards, I&amp;rsquo;m happy to say we have
emulators running mochitests, reftests and marionette/webapi tests, all reporting to TBPL.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>State of Reftests on B2G</title>
      <link>https://ahal.ca/blog/2012/state-reftest-b2g/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2012/state-reftest-b2g/</guid>
      <description>&lt;p&gt;This quarter I&amp;rsquo;ve been focusing on getting reftests running on B2G, triaging them and fixing various
issues. The purpose of this post is to outline their status, go over the work that still needs to be
done and point out where I will need some help.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Easier way to Manage Mozconfigs</title>
      <link>https://ahal.ca/blog/2011/mozconfigwrapper-introduction/</link>
      <pubDate>Tue, 15 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2011/mozconfigwrapper-introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ahal/mozconfigwrapper&#34;&gt;Mozconfigwrapper&lt;/a&gt; is a tool inspired by Doug Hellman&amp;rsquo;s magnificent &lt;a href=&#34;http://www.doughellmann.com/projects/virtualenvwrapper/&#34;&gt;virtualenvwrapper&lt;/a&gt;. In a
nutshell, mozconfigwrapper hides all of your mozconfigs into a configurable directory (defaults to
~/.mozconfigs), and lets you easily switch, create, remove, edit and list them. Mozconfigwrapper is
Unix only for now.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Peptest: A new harness for testing responsiveness</title>
      <link>https://ahal.ca/blog/2011/peptest-introduction/</link>
      <pubDate>Sat, 05 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2011/peptest-introduction/</guid>
      <description>&lt;p&gt;While responsiveness is one of the main goals for Firefox this quarter, we still don&amp;rsquo;t quite have
the means to measure and test our progress towards this goal. The good news is that there are, and
have been for some time, several efforts to fix this problem. Back in June, Ted wrote some &lt;a href=&#34;http://blog.mozilla.com/ted/2011/06/27/measuring-ui-responsiveness/&#34;&gt;event
tracing instrumentation&lt;/a&gt; that gives us a reasonable idea of when the browser becomes
unresponsive. This event tracer is already being used by some Talos tests which gives us a good
general idea of whether or not Firefox is more or less responsive than it was previously. What it
doesn&amp;rsquo;t give us is a method for developers to write their own tests and determine whether a specific
action or feature they are working on is causing unresponsivness.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Isolating Mozmill&#39;s Driver</title>
      <link>https://ahal.ca/blog/2011/isolating-mozmill-driver/</link>
      <pubDate>Thu, 20 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2011/isolating-mozmill-driver/</guid>
      <description>&lt;p&gt;At the beginning of September, I was asked to write &lt;a href=&#34;https://wiki.mozilla.org/Auto-tools/Projects/peptest&#34;&gt;yet another automated test harness&lt;/a&gt; for
testing user responsiveness. Among other things, the harness needed to be capable of automating a
wide range of user interactions in Firefox (such as opening context menus, clicking buttons etc). Oh
and by the way this needs to be finished as quickly as possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why I&#39;m Returning to Mozilla for a Third Internship</title>
      <link>https://ahal.ca/blog/2011/why-mozilla-is-awesome/</link>
      <pubDate>Tue, 31 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2011/why-mozilla-is-awesome/</guid>
      <description>&lt;p&gt;Before I started interning at Mozilla back in May 2010, I really didn&amp;rsquo;t know
what to expect.  How does a non-profit company with an open source product
operate?  After working at giant corporations like IBM and McAfee I couldn&amp;rsquo;t
fathom what the experience would be like.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to bulk install Firefox Addons</title>
      <link>https://ahal.ca/blog/2011/bulk-installing-fx-addons/</link>
      <pubDate>Sat, 09 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://ahal.ca/blog/2011/bulk-installing-fx-addons/</guid>
      <description>&lt;p&gt;Firefox is known for its extensibility. In fact, over 2.4 &lt;em&gt;billion&lt;/em&gt; addons have been downloaded to date,
meaning there are a lot of people using a lot of addons. While having 20+ addons can undoubtedly personalize your
browsing experience, it can also be a pain in the ass to manually install them every time you set up a new
Firefox profile. As a developer working on Firefox related automation tools, this is twice as
true since I create a separate profile for each and every project I work on, installing a constant set of
addons on each one.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
